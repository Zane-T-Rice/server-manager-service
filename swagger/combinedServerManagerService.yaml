openapi: 3.0.0
info:
  title: Server Manager Service
  description: Define and control your servers with these routes.
  version: 0.1.0
servers:
  - url: /server-manager-service
  - url: /
security:
  - ApiBearerAuth: []
tags:
  - name: hosts
    description: The Hosts where Servers live
  - name: servers
    description: The root of managing and configuring your Servers
  - name: ports
    description: Manage a Server's Ports
  - name: volumes
    description: Manage a Server's Volumes
  - name: environmentVariables
    description: Manage a Server's EnvironmentVariables
  - name: files
    description: Manage a Server's build Files
externalDocs:
  description: GitHub
  url: https://github.com/Zane-T-Rice/server-manager-service
paths:
  /hosts:
    post:
      tags:
        - hosts
      summary: Create a new host
      operationId: createhost
      requestBody:
        $ref: '#/components/requestBodies/hostCreateRequest'
      responses:
        '200':
          $ref: '#/components/responses/hostResponse'
        '401':
          $ref: '#/components/responses/notAuthorizedError'
        '500':
          $ref: '#/components/responses/internalServerError'
    get:
      tags:
        - hosts
      summary: Get hosts of Server
      operationId: gethosts
      responses:
        '200':
          $ref: '#/components/responses/hostArrayResponse'
        '401':
          $ref: '#/components/responses/notAuthorizedError'
        '404':
          $ref: '#/components/responses/hostNotFoundError'
        '500':
          $ref: '#/components/responses/internalServerError'
  /hosts/{hostId}:
    get:
      tags:
        - hosts
      summary: Get a host by id
      operationId: gethost
      parameters:
        - $ref: '#/components/parameters/hostIdInPath'
      responses:
        '200':
          $ref: '#/components/responses/hostResponse'
        '401':
          $ref: '#/components/responses/notAuthorizedError'
        '404':
          $ref: '#/components/responses/hostNotFoundError'
        '500':
          $ref: '#/components/responses/internalServerError'
    patch:
      tags:
        - hosts
      summary: Update a host by id
      operationId: patchhost
      parameters:
        - $ref: '#/components/parameters/hostIdInPath'
      requestBody:
        $ref: '#/components/requestBodies/hostPatchRequest'
      responses:
        '200':
          $ref: '#/components/responses/hostResponse'
        '401':
          $ref: '#/components/responses/notAuthorizedError'
        '404':
          $ref: '#/components/responses/hostNotFoundError'
        '500':
          $ref: '#/components/responses/internalServerError'
    delete:
      tags:
        - hosts
      summary: Delete a host by id
      operationId: deletehost
      parameters:
        - $ref: '#/components/parameters/hostIdInPath'
      responses:
        '200':
          $ref: '#/components/responses/hostResponse'
        '401':
          $ref: '#/components/responses/notAuthorizedError'
        '404':
          $ref: '#/components/responses/hostNotFoundError'
  /hosts/{hostId}/servers:
    post:
      tags:
        - servers
      summary: Create a new Server
      operationId: createServer
      parameters:
        - $ref: '#/components/parameters/hostIdInPath'
      requestBody:
        $ref: '#/components/requestBodies/serverCreateRequest'
      responses:
        '200':
          $ref: '#/components/responses/serverResponse'
        '401':
          $ref: '#/components/responses/notAuthorizedError'
        '500':
          $ref: '#/components/responses/internalServerError'
    get:
      tags:
        - servers
      summary: Get all Servers
      operationId: getServers
      parameters:
        - $ref: '#/components/parameters/hostIdInPath'
        - in: query
          name: isUpdatable
          schema:
            type: boolean
          description: filter results based on if a Server is updatable or not
      responses:
        '200':
          $ref: '#/components/responses/serverArrayResponse'
        '401':
          $ref: '#/components/responses/notAuthorizedError'
        '404':
          $ref: '#/components/responses/serverNotFoundError'
        '500':
          $ref: '#/components/responses/internalServerError'
  /hosts/{hostId}/servers/{serverId}:
    get:
      tags:
        - servers
      summary: Get a Server by id
      operationId: getServer
      parameters:
        - $ref: '#/components/parameters/hostIdInPath'
        - $ref: '#/components/parameters/serverIdInPath'
      responses:
        '200':
          $ref: '#/components/responses/serverResponse'
        '401':
          $ref: '#/components/responses/notAuthorizedError'
        '404':
          $ref: '#/components/responses/serverNotFoundError'
        '500':
          $ref: '#/components/responses/internalServerError'
    patch:
      tags:
        - servers
      summary: Patch a Server by id
      operationId: patchServer
      parameters:
        - $ref: '#/components/parameters/hostIdInPath'
        - $ref: '#/components/parameters/serverIdInPath'
      requestBody:
        $ref: '#/components/requestBodies/serverPatchRequest'
      responses:
        '200':
          $ref: '#/components/responses/serverResponse'
        '401':
          $ref: '#/components/responses/notAuthorizedError'
        '404':
          $ref: '#/components/responses/serverNotFoundError'
        '500':
          $ref: '#/components/responses/internalServerError'
    delete:
      tags:
        - servers
      summary: Delete a Server by id
      operationId: deleteServer
      parameters:
        - $ref: '#/components/parameters/hostIdInPath'
        - $ref: '#/components/parameters/serverIdInPath'
      responses:
        '200':
          $ref: '#/components/responses/serverResponse'
        '401':
          $ref: '#/components/responses/notAuthorizedError'
        '404':
          $ref: '#/components/responses/serverNotFoundError'
        '500':
          $ref: '#/components/responses/internalServerError'
  /hosts/{hostId}/servers/{serverId}/start:
    post:
      tags:
        - servers
      summary: Start a Server by id
      operationId: startServer
      parameters:
        - $ref: '#/components/parameters/hostIdInPath'
        - $ref: '#/components/parameters/serverIdInPath'
      responses:
        '200':
          $ref: '#/components/responses/serverArrayResponse'
        '401':
          $ref: '#/components/responses/notAuthorizedError'
        '404':
          $ref: '#/components/responses/serverNotFoundError'
        '500':
          $ref: '#/components/responses/internalServerError'
  /hosts/{hostId}/servers/{serverId}/stop:
    post:
      tags:
        - servers
      summary: Stop a Server by id
      operationId: stopServer
      parameters:
        - $ref: '#/components/parameters/hostIdInPath'
        - $ref: '#/components/parameters/serverIdInPath'
      responses:
        '200':
          $ref: '#/components/responses/serverArrayResponse'
        '401':
          $ref: '#/components/responses/notAuthorizedError'
        '404':
          $ref: '#/components/responses/serverNotFoundError'
        '500':
          $ref: '#/components/responses/internalServerError'
  /hosts/{hostId}/servers/{serverId}/restart:
    post:
      tags:
        - servers
      summary: Restart a Server by id
      operationId: restartServer
      parameters:
        - $ref: '#/components/parameters/hostIdInPath'
        - $ref: '#/components/parameters/serverIdInPath'
      responses:
        '200':
          $ref: '#/components/responses/serverResponse'
        '401':
          $ref: '#/components/responses/notAuthorizedError'
        '404':
          $ref: '#/components/responses/serverNotFoundError'
        '500':
          $ref: '#/components/responses/internalServerError'
  /hosts/{hostId}/servers/{serverId}/update:
    post:
      tags:
        - servers
      summary: Update a Server by id
      description: This is for rebuilding containers to bring them fully up to date. If you are trying to patch the configuration of a Server, use the PATCH /servers/{serverId} route instead.
      operationId: updateServer
      parameters:
        - $ref: '#/components/parameters/hostIdInPath'
        - $ref: '#/components/parameters/serverIdInPath'
      responses:
        '200':
          $ref: '#/components/responses/serverResponse'
        '401':
          $ref: '#/components/responses/notAuthorizedError'
        '404':
          $ref: '#/components/responses/serverNotFoundError'
        '500':
          $ref: '#/components/responses/internalServerError'
  /hosts/{hostId}/servers/{serverId}/users/{userId}:
    post:
      tags:
        - userServerLinks
      summary: Link a Server by id to a User by id
      operationId: linkUserServer
      parameters:
        - $ref: '#/components/parameters/hostIdInPath'
        - $ref: '#/components/parameters/serverIdInPath'
        - $ref: '#/components/parameters/userIdInPath'
      responses:
        '200':
          $ref: '#/components/responses/userServerLinksResponse'
        '401':
          $ref: '#/components/responses/notAuthorizedError'
        '404':
          description: The Server could not be found.
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/serverNotFoundErrorSchema'
                  - $ref: '#/components/schemas/hostNotFoundErrorSchema'
        '500':
          $ref: '#/components/responses/internalServerError'
    delete:
      tags:
        - userServerLinks
      summary: Delete a Link between a Server by id and a User by id
      operationId: unlinkUserServer
      parameters:
        - $ref: '#/components/parameters/hostIdInPath'
        - $ref: '#/components/parameters/serverIdInPath'
        - $ref: '#/components/parameters/userIdInPath'
      responses:
        '200':
          $ref: '#/components/responses/userServerLinksResponse'
        '401':
          $ref: '#/components/responses/notAuthorizedError'
        '404':
          description: The Server could not be found.
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/serverNotFoundErrorSchema'
                  - $ref: '#/components/schemas/hostNotFoundErrorSchema'
        '500':
          $ref: '#/components/responses/internalServerError'
  /hosts/{hostId}/servers/{serverId}/ports:
    post:
      tags:
        - ports
      summary: Create a new port
      operationId: createPort
      parameters:
        - $ref: '#/components/parameters/hostIdInPath'
        - $ref: '#/components/parameters/serverIdInPath'
      requestBody:
        $ref: '#/components/requestBodies/portCreateRequest'
      responses:
        '200':
          $ref: '#/components/responses/portResponse'
        '401':
          $ref: '#/components/responses/notAuthorizedError'
        '500':
          $ref: '#/components/responses/internalServerError'
    get:
      tags:
        - ports
      summary: Get Ports of Server
      operationId: getPorts
      parameters:
        - $ref: '#/components/parameters/hostIdInPath'
        - $ref: '#/components/parameters/serverIdInPath'
      responses:
        '200':
          $ref: '#/components/responses/portArrayResponse'
        '401':
          $ref: '#/components/responses/notAuthorizedError'
        '404':
          $ref: '#/components/responses/portNotFoundError'
        '500':
          $ref: '#/components/responses/internalServerError'
  /hosts/{hostId}/servers/{serverId}/ports/{portId}:
    get:
      tags:
        - ports
      summary: Get a Port by id
      operationId: getPort
      parameters:
        - $ref: '#/components/parameters/hostIdInPath'
        - $ref: '#/components/parameters/serverIdInPath'
        - $ref: '#/components/parameters/portIdInPath'
      responses:
        '200':
          $ref: '#/components/responses/portResponse'
        '401':
          $ref: '#/components/responses/notAuthorizedError'
        '404':
          $ref: '#/components/responses/portNotFoundError'
        '500':
          $ref: '#/components/responses/internalServerError'
    patch:
      tags:
        - ports
      summary: Update a Port by id
      operationId: patchPort
      parameters:
        - $ref: '#/components/parameters/hostIdInPath'
        - $ref: '#/components/parameters/serverIdInPath'
        - $ref: '#/components/parameters/portIdInPath'
      requestBody:
        $ref: '#/components/requestBodies/portPatchRequest'
      responses:
        '200':
          $ref: '#/components/responses/portResponse'
        '401':
          $ref: '#/components/responses/notAuthorizedError'
        '404':
          $ref: '#/components/responses/portNotFoundError'
        '500':
          $ref: '#/components/responses/internalServerError'
    delete:
      tags:
        - ports
      summary: Delete a port by id
      operationId: deletePort
      parameters:
        - $ref: '#/components/parameters/hostIdInPath'
        - $ref: '#/components/parameters/serverIdInPath'
        - $ref: '#/components/parameters/portIdInPath'
      responses:
        '200':
          $ref: '#/components/responses/portResponse'
        '401':
          $ref: '#/components/responses/notAuthorizedError'
        '404':
          $ref: '#/components/responses/portNotFoundError'
  /hosts/{hostId}/servers/{serverId}/volumes:
    post:
      tags:
        - volumes
      summary: Create a new volume
      operationId: createVolume
      parameters:
        - $ref: '#/components/parameters/hostIdInPath'
        - $ref: '#/components/parameters/serverIdInPath'
      requestBody:
        $ref: '#/components/requestBodies/volumeCreateRequest'
      responses:
        '200':
          $ref: '#/components/responses/volumeResponse'
        '401':
          $ref: '#/components/responses/notAuthorizedError'
        '500':
          $ref: '#/components/responses/internalServerError'
    get:
      tags:
        - volumes
      summary: Get Volumes of Server
      operationId: getVolumes
      parameters:
        - $ref: '#/components/parameters/hostIdInPath'
        - $ref: '#/components/parameters/serverIdInPath'
      responses:
        '200':
          $ref: '#/components/responses/volumeArrayResponse'
        '401':
          $ref: '#/components/responses/notAuthorizedError'
        '404':
          $ref: '#/components/responses/volumeNotFoundError'
        '500':
          $ref: '#/components/responses/internalServerError'
  /hosts/{hostId}/servers/{serverId}/volumes/{volumeId}:
    get:
      tags:
        - volumes
      summary: Get a Volume by id
      operationId: getVolume
      parameters:
        - $ref: '#/components/parameters/hostIdInPath'
        - $ref: '#/components/parameters/serverIdInPath'
        - $ref: '#/components/parameters/volumeIdInPath'
      responses:
        '200':
          $ref: '#/components/responses/volumeResponse'
        '401':
          $ref: '#/components/responses/notAuthorizedError'
        '404':
          $ref: '#/components/responses/volumeNotFoundError'
        '500':
          $ref: '#/components/responses/internalServerError'
    patch:
      tags:
        - volumes
      summary: Update a Volume by id
      operationId: patchVolume
      parameters:
        - $ref: '#/components/parameters/hostIdInPath'
        - $ref: '#/components/parameters/serverIdInPath'
        - $ref: '#/components/parameters/volumeIdInPath'
      requestBody:
        $ref: '#/components/requestBodies/volumePatchRequest'
      responses:
        '200':
          $ref: '#/components/responses/volumeResponse'
        '401':
          $ref: '#/components/responses/notAuthorizedError'
        '404':
          $ref: '#/components/responses/volumeNotFoundError'
        '500':
          $ref: '#/components/responses/internalServerError'
    delete:
      tags:
        - volumes
      summary: Delete a Volume by id
      operationId: deleteVolume
      parameters:
        - $ref: '#/components/parameters/hostIdInPath'
        - $ref: '#/components/parameters/serverIdInPath'
        - $ref: '#/components/parameters/volumeIdInPath'
      responses:
        '200':
          $ref: '#/components/responses/volumeResponse'
        '401':
          $ref: '#/components/responses/notAuthorizedError'
        '404':
          $ref: '#/components/responses/volumeNotFoundError'
  /hosts/{hostId}/servers/{serverId}/environmentVariables:
    post:
      tags:
        - environmentVariables
      summary: Create a new environmentVariable
      operationId: createEnvironmentVariable
      parameters:
        - $ref: '#/components/parameters/hostIdInPath'
        - $ref: '#/components/parameters/serverIdInPath'
      requestBody:
        $ref: '#/components/requestBodies/environmentVariableCreateRequest'
      responses:
        '200':
          $ref: '#/components/responses/environmentVariableResponse'
        '401':
          $ref: '#/components/responses/notAuthorizedError'
        '500':
          $ref: '#/components/responses/internalServerError'
    get:
      tags:
        - environmentVariables
      summary: Get EnvironmentVariables of Server
      operationId: getEnvironmentVariables
      parameters:
        - $ref: '#/components/parameters/hostIdInPath'
        - $ref: '#/components/parameters/serverIdInPath'
      responses:
        '200':
          $ref: '#/components/responses/environmentVariableArrayResponse'
        '401':
          $ref: '#/components/responses/notAuthorizedError'
        '404':
          $ref: '#/components/responses/environmentVariableNotFoundError'
        '500':
          $ref: '#/components/responses/internalServerError'
  /hosts/{hostId}/servers/{serverId}/environmentVariables/{environmentVariableId}:
    get:
      tags:
        - environmentVariables
      summary: Get an EnvironmentVariable by id
      operationId: getEnvironmentVariable
      parameters:
        - $ref: '#/components/parameters/hostIdInPath'
        - $ref: '#/components/parameters/serverIdInPath'
        - $ref: '#/components/parameters/environmentVariableIdInPath'
      responses:
        '200':
          $ref: '#/components/responses/environmentVariableResponse'
        '401':
          $ref: '#/components/responses/notAuthorizedError'
        '404':
          $ref: '#/components/responses/environmentVariableNotFoundError'
        '500':
          $ref: '#/components/responses/internalServerError'
    patch:
      tags:
        - environmentVariables
      summary: Update an EnvironmentVariable by id
      operationId: patchEnvironmentVariable
      parameters:
        - $ref: '#/components/parameters/hostIdInPath'
        - $ref: '#/components/parameters/serverIdInPath'
        - $ref: '#/components/parameters/environmentVariableIdInPath'
      requestBody:
        $ref: '#/components/requestBodies/environmentVariablePatchRequest'
      responses:
        '200':
          $ref: '#/components/responses/environmentVariableResponse'
        '401':
          $ref: '#/components/responses/notAuthorizedError'
        '404':
          $ref: '#/components/responses/environmentVariableNotFoundError'
        '500':
          $ref: '#/components/responses/internalServerError'
    delete:
      tags:
        - environmentVariables
      summary: Delete an EnvironmentVariable by id
      operationId: deleteEnvironmentVariable
      parameters:
        - $ref: '#/components/parameters/hostIdInPath'
        - $ref: '#/components/parameters/serverIdInPath'
        - $ref: '#/components/parameters/environmentVariableIdInPath'
      responses:
        '200':
          $ref: '#/components/responses/environmentVariableResponse'
        '401':
          $ref: '#/components/responses/notAuthorizedError'
        '404':
          $ref: '#/components/responses/environmentVariableNotFoundError'
  /hosts/{hostId}/servers/{serverId}/files:
    post:
      tags:
        - files
      summary: Create a new file
      description: This takes a base64 encoded file. An easy way to base64 encode a file with node is Buffer.from(fs.readFileSync('filename').toString()).toString('base64').
      operationId: createFile
      parameters:
        - $ref: '#/components/parameters/hostIdInPath'
        - $ref: '#/components/parameters/serverIdInPath'
      requestBody:
        $ref: '#/components/requestBodies/fileCreateRequest'
      responses:
        '200':
          $ref: '#/components/responses/fileResponse'
        '401':
          $ref: '#/components/responses/notAuthorizedError'
        '500':
          $ref: '#/components/responses/internalServerError'
    get:
      tags:
        - files
      summary: Get Files of Server
      operationId: getFiles
      parameters:
        - $ref: '#/components/parameters/hostIdInPath'
        - $ref: '#/components/parameters/serverIdInPath'
      responses:
        '200':
          $ref: '#/components/responses/fileArrayResponse'
        '401':
          $ref: '#/components/responses/notAuthorizedError'
        '404':
          $ref: '#/components/responses/fileNotFoundError'
        '500':
          $ref: '#/components/responses/internalServerError'
  /hosts/{hostId}/servers/{serverId}/files/{fileId}:
    get:
      tags:
        - files
      summary: Get a File by id
      operationId: getFile
      parameters:
        - $ref: '#/components/parameters/hostIdInPath'
        - $ref: '#/components/parameters/serverIdInPath'
        - $ref: '#/components/parameters/fileIdInPath'
      responses:
        '200':
          $ref: '#/components/responses/fileResponse'
        '401':
          $ref: '#/components/responses/notAuthorizedError'
        '404':
          $ref: '#/components/responses/fileNotFoundError'
        '500':
          $ref: '#/components/responses/internalServerError'
    patch:
      tags:
        - files
      summary: Update a File by id
      operationId: patchFile
      parameters:
        - $ref: '#/components/parameters/hostIdInPath'
        - $ref: '#/components/parameters/serverIdInPath'
        - $ref: '#/components/parameters/fileIdInPath'
      requestBody:
        $ref: '#/components/requestBodies/filePatchRequest'
      responses:
        '200':
          $ref: '#/components/responses/fileResponse'
        '401':
          $ref: '#/components/responses/notAuthorizedError'
        '404':
          $ref: '#/components/responses/fileNotFoundError'
        '500':
          $ref: '#/components/responses/internalServerError'
    delete:
      tags:
        - files
      summary: Delete a File by id
      operationId: deleteFile
      parameters:
        - $ref: '#/components/parameters/hostIdInPath'
        - $ref: '#/components/parameters/serverIdInPath'
        - $ref: '#/components/parameters/fileIdInPath'
      responses:
        '200':
          $ref: '#/components/responses/fileResponse'
        '401':
          $ref: '#/components/responses/notAuthorizedError'
        '404':
          $ref: '#/components/responses/fileNotFoundError'
  /users/servers:
    get:
      tags:
        - userServers
      summary: Get all Servers For This User
      operationId: getUserServers
      parameters:
        - in: query
          name: isUpdatable
          schema:
            type: boolean
          description: filter results based on if a Server is updatable or not
      responses:
        '200':
          $ref: '#/components/responses/userServerArrayResponse'
        '401':
          $ref: '#/components/responses/notAuthorizedError'
        '404':
          $ref: '#/components/responses/serverNotFoundError'
        '500':
          $ref: '#/components/responses/internalServerError'
  /users/servers/{serverId}:
    get:
      tags:
        - userServers
      summary: Get a Server owned by this User by id
      operationId: getUserServer
      parameters:
        - $ref: '#/components/parameters/serverIdInPath'
      responses:
        '200':
          $ref: '#/components/responses/userServerResponse'
        '401':
          $ref: '#/components/responses/notAuthorizedError'
        '404':
          $ref: '#/components/responses/serverNotFoundError'
        '500':
          $ref: '#/components/responses/internalServerError'
  /users/servers/{serverId}/start:
    post:
      tags:
        - userServers
      summary: Start a Server owned by this user by id
      operationId: startUserServer
      parameters:
        - $ref: '#/components/parameters/serverIdInPath'
      responses:
        '200':
          $ref: '#/components/responses/userServerArrayResponse'
        '401':
          $ref: '#/components/responses/notAuthorizedError'
        '404':
          $ref: '#/components/responses/serverNotFoundError'
        '500':
          $ref: '#/components/responses/internalServerError'
  /users/servers/{serverId}/stop:
    post:
      tags:
        - userServers
      summary: Stop a Server owned by this user by id
      operationId: stopUserServer
      parameters:
        - $ref: '#/components/parameters/serverIdInPath'
      responses:
        '200':
          $ref: '#/components/responses/userServerArrayResponse'
        '401':
          $ref: '#/components/responses/notAuthorizedError'
        '404':
          $ref: '#/components/responses/serverNotFoundError'
        '500':
          $ref: '#/components/responses/internalServerError'
  /users/servers/{serverId}/restart:
    post:
      tags:
        - userServers
      summary: Restart a Server owned by this user by id
      operationId: restartUserServer
      parameters:
        - $ref: '#/components/parameters/serverIdInPath'
      responses:
        '200':
          $ref: '#/components/responses/userServerArrayResponse'
        '401':
          $ref: '#/components/responses/notAuthorizedError'
        '404':
          $ref: '#/components/responses/serverNotFoundError'
        '500':
          $ref: '#/components/responses/internalServerError'
  /users/servers/{serverId}/update:
    post:
      tags:
        - userServers
      summary: Update a Server owned by this user by id
      description: This is for rebuilding containers to bring them fully up to date. If you are trying to patch the configuration of a Server, use the PATCH /servers/{serverId} route instead.
      operationId: updateUserServer
      parameters:
        - $ref: '#/components/parameters/serverIdInPath'
      responses:
        '200':
          $ref: '#/components/responses/userServerArrayResponse'
        '401':
          $ref: '#/components/responses/notAuthorizedError'
        '404':
          $ref: '#/components/responses/serverNotFoundError'
        '500':
          $ref: '#/components/responses/internalServerError'
components:
  securitySchemes:
    ApiBearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    hostResponseSchema:
      required:
        - id
        - name
        - url
      type: object
      nullable: true
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        url:
          type: string
    notAuthorizedErrorSchema:
      type: object
      properties:
        description:
          type: string
          example: UnauthorizedError
        message:
          type: string
          example: Requester is not authorized.
    hostNotFoundErrorSchema:
      type: object
      properties:
        description:
          type: string
          example: NotFoundError
        message:
          type: string
          example: The Host with id 0192de27-1917-702e-93ed-cc4e77227d99 was not found.
    internalServerErrorSchema:
      type: object
      properties:
        description:
          type: string
          example: InternalServerError
        message:
          type: string
          example: Your request cannot be processed at this time. The server may be having a bad day.
    hostRequestSchema:
      required:
        - name
        - url
      type: object
      properties:
        name:
          type: string
        url:
          type: string
    serverResponseSchema:
      required:
        - id
        - applicationName
        - containerName
        - isUpdatable
        - isInResponseChain
      type: object
      properties:
        id:
          type: string
          format: uuid
        applicationName:
          type: string
        containerName:
          type: string
        isUpdatable:
          type: boolean
        isInResponseChain:
          type: boolean
        hostId:
          type: string
          format: uuid
    serverNotFoundErrorSchema:
      type: object
      properties:
        description:
          type: string
          example: NotFoundError
        message:
          type: string
          example: The server with id 0192de27-1917-702e-93ed-cc4e77227d99 was not found.
    serverRequestSchema:
      required:
        - applicationName
        - containerName
        - hostId
      type: object
      properties:
        applicationName:
          type: string
        containerName:
          type: string
        isUpdatable:
          type: boolean
        isInResponseChain:
          type: boolean
        hostId:
          type: string
    userServerLinksResponseSchema:
      required:
        - userId
        - serverId
      type: object
      properties:
        userId:
          type: string
          format: uuid
        serverId:
          type: string
          format: uuid
    portResponseSchema:
      required:
        - id
        - number
        - protocol
      type: object
      properties:
        id:
          type: string
          format: uuid
        number:
          type: number
        protocol:
          type: string
    portNotFoundErrorSchema:
      type: object
      properties:
        description:
          type: string
          example: NotFoundError
        message:
          type: string
          example: The Port with id 0192de27-1917-702e-93ed-cc4e77227d99 was not found.
    portRequestSchema:
      required:
        - number
        - protocol
      type: object
      properties:
        number:
          type: number
        protocol:
          type: string
    volumeResponseSchema:
      required:
        - id
        - hostPath
        - containerPath
      type: object
      properties:
        id:
          type: string
          format: uuid
        hostPath:
          type: string
        containerPath:
          type: string
    volumeNotFoundErrorSchema:
      type: object
      properties:
        description:
          type: string
          example: NotFoundError
        message:
          type: string
          example: The Volume with id 0192de27-1917-702e-93ed-cc4e77227d99 was not found.
    volumeRequestSchema:
      required:
        - hostPath
        - containerPath
      type: object
      properties:
        hostPath:
          type: string
        containerPath:
          type: string
    environmentVariableResponseSchema:
      required:
        - id
        - name
        - value
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        value:
          type: string
    environmentVariableNotFoundErrorSchema:
      type: object
      properties:
        description:
          type: string
          example: NotFoundError
        message:
          type: string
          example: The EnvironmentVariable with id 0192de27-1917-702e-93ed-cc4e77227d99 was not found.
    environmentVariableRequestSchema:
      required:
        - name
        - value
      type: object
      properties:
        name:
          type: string
        value:
          type: string
    fileResponseSchema:
      required:
        - id
        - content
        - name
      type: object
      properties:
        id:
          type: string
          format: uuid
        content:
          description: base64 encoded contents of the file.
          type: string
        name:
          type: string
    fileNotFoundErrorSchema:
      type: object
      properties:
        description:
          type: string
          example: NotFoundError
        message:
          type: string
          example: The File with id 0192de27-1917-702e-93ed-cc4e77227d99 was not found.
    fileRequestSchema:
      required:
        - content
        - name
      type: object
      properties:
        content:
          description: base64 encoded contents of the file.
          type: string
        name:
          type: string
    userServerResponseSchema:
      required:
        - id
        - applicationName
        - containerName
        - isUpdatable
        - ports
        - host
      type: object
      properties:
        id:
          type: string
          format: uuid
        applicationName:
          type: string
        containerName:
          type: string
        isUpdatable:
          type: boolean
        ports:
          type: array
          items:
            $ref: '#/components/schemas/portResponseSchema'
        host:
          type: object
          properties:
            url:
              type: string
  responses:
    hostArrayResponse:
      description: Success
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/hostResponseSchema'
    notAuthorizedError:
      description: Unauthorized Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/notAuthorizedErrorSchema'
    hostNotFoundError:
      description: The Host could not be found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/hostNotFoundErrorSchema'
    internalServerError:
      description: Internal Server Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/internalServerErrorSchema'
    hostResponse:
      description: Success
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/hostResponseSchema'
    serverArrayResponse:
      description: Success
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/serverResponseSchema'
    serverNotFoundError:
      description: The Server could not be found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/serverNotFoundErrorSchema'
    serverResponse:
      description: Success
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/serverResponseSchema'
    userServerLinksResponse:
      description: Success
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/userServerLinksResponseSchema'
    portArrayResponse:
      description: Success
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/portResponseSchema'
    portNotFoundError:
      description: The Port could not be found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/portNotFoundErrorSchema'
    portResponse:
      description: Success
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/portResponseSchema'
    volumeArrayResponse:
      description: Success
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/volumeResponseSchema'
    volumeNotFoundError:
      description: The Volume could not be found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/volumeNotFoundErrorSchema'
    volumeResponse:
      description: Success
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/volumeResponseSchema'
    environmentVariableArrayResponse:
      description: Success
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/environmentVariableResponseSchema'
    environmentVariableNotFoundError:
      description: The EnvironmentVariable could not be found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/environmentVariableNotFoundErrorSchema'
    environmentVariableResponse:
      description: Success
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/environmentVariableResponseSchema'
    fileArrayResponse:
      description: Success
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/fileResponseSchema'
    fileNotFoundError:
      description: The File could not be found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/fileNotFoundErrorSchema'
    fileResponse:
      description: Success
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/fileResponseSchema'
    userServerArrayResponse:
      description: Success
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/userServerResponseSchema'
    userServerResponse:
      description: Success
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/userServerResponseSchema'
  requestBodies:
    hostCreateRequest:
      description: Create a new host
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/hostRequestSchema'
    hostPatchRequest:
      description: Update an existing host
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/hostRequestSchema'
    serverCreateRequest:
      description: Create a new Server
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/serverRequestSchema'
    serverPatchRequest:
      description: Update an existing Server
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/serverRequestSchema'
    portCreateRequest:
      description: Create a new port
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/portRequestSchema'
    portPatchRequest:
      description: Update an existing port
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/portRequestSchema'
    volumeCreateRequest:
      description: Create a new volume
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/volumeRequestSchema'
    volumePatchRequest:
      description: Update an existing volume
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/volumeRequestSchema'
    environmentVariableCreateRequest:
      description: Create a new EnvironmentVariable
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/environmentVariableRequestSchema'
    environmentVariablePatchRequest:
      description: Update an existing EnvironmentVariable
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/environmentVariableRequestSchema'
    fileCreateRequest:
      description: Create a new file
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/fileRequestSchema'
    filePatchRequest:
      description: Update an existing file
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/fileRequestSchema'
  parameters:
    hostIdInPath:
      description: id of the Host
      name: hostId
      in: path
      required: true
      schema:
        type: string
        format: uuid
    serverIdInPath:
      description: id of the Server
      name: serverId
      in: path
      required: true
      schema:
        type: string
        format: uuid
    userIdInPath:
      description: id of the User
      name: userId
      in: path
      required: true
      schema:
        type: string
        format: uuid
    portIdInPath:
      description: id of the Port
      name: portId
      in: path
      required: true
      schema:
        type: string
        format: uuid
    volumeIdInPath:
      description: id of the Volume
      name: volumeId
      in: path
      required: true
      schema:
        type: string
        format: uuid
    environmentVariableIdInPath:
      description: id of the EnvironmentVariable
      name: environmentVariableId
      in: path
      required: true
      schema:
        type: string
        format: uuid
    fileIdInPath:
      description: id of the File
      name: fileId
      in: path
      required: true
      schema:
        type: string
        format: uuid
